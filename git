设置
git config --global user.name "nick"
git config --global user.emial "chenbin@yaxon.com"

git config --list

创建仓库
cd ~
mkdir myGit
cd myGit
pwd  (显示路径)
git init (初始化仓库)
la -ah (查看创建后生成的目录 .git 版本库)

gedit readme.txt　(创建测试的文本，内容为：project for Git.)
git add readme.txt 添加到暂存区  （添加单个文件，如果添加所有：git add -A）
git commit -m "wrote a readme file" 提交（不针对当个文件，提交整个暂存区到版本库）

输出：
 Committer: nick <nick@HYSYB-CHENBIN.218.85.157.99>
．．．．
1 file changed, 1 insertion(+)
 create mode 100644 readme.txt


查看仓库状态(修改readme.txt前与后，查看不同)
git status

修改readme.txt（新增一行add a new line.）后
git diff　readme.txt 查看改动的地方

输出：
diff --git a/readme.txt b/readme.txt
index de62b2f..e49bd99 100644
--- a/readme.txt
+++ b/readme.txt
@@ -1 +1,2 @@
 project for Git.
+add a new line.

* 掌握unix　diff格式含义

git add readme.txt
git status (这时提示需要commit, 而使用git diff readme.txt 已经无法查看改动了，因为已添加到暂存区)

如果要查看本地文件(工作区)和版本库中的文件区别：
git diff HEAD -- readme.txt

git reset HEAD readme.txt 撤出暂存区，使用git diff readme.txt又可以查看改动了
HEAD代表当前版本，上个版本HEAD^ 上上版本HEAD^^ ....等同于HEAD~1 HEAD~2
输出：
重置后撤出暂存区的变更：
M	readme.txt

git add readme.txt
git commit -m "add new line"

修改readme.txt(首行改为：project for Git learning.)
git add readme.txt
git commit -m "modify the first line"
git log 查看更新记录

git log --pretty=oneline　每次更新只显示一行
输出：
8c47fac5555b66943beb9d19dfaebc459cf8e4c4 modify the first line
1b4fa06763f12ac703c8c8c3a2391847ba433398 add new line
49be22741cc156a118c8e6cc27133c1217edfba9 wrote a readme file

版本号　＋　修改说明
回退到上一个版本：
git reset --hard HEAD^

输出：
HEAD 现在位于 1b4fa06 add new line

回退成功后，当前版本就变为1b4fa06了
git log --pretty=oneline

当前命令窗口未关闭时，要回到8c47fac...：
git reset --hard 8c47

当前版本又变为8c47....

git reset --hard HEAD^ 先回退上一个版本
如果命令窗口已关闭（已不知道版本号），要回到8c47...:

nick@HYSYB-CHENBIN:~/myGit$ git reflog
1b4fa06 HEAD@{0}: reset: moving to HEAD^
8c47fac HEAD@{1}: reset: moving to 8c47
1b4fa06 HEAD@{2}: reset: moving to HEAD^
8c47fac HEAD@{3}: commit: modify the first line　　这里可以获取到版本号，则可以回退到此版本号
1b4fa06 HEAD@{4}: commit: add new line
49be227 HEAD@{5}: commit (initial): wrote a readme file

git reset --hard 8c47

修改readme.txt,增加一行：
echo text diff >> readme.txt

如果要撤销修改：
git checkout -- readme.txt

如果是先add再撤销修改：
git add readme.txt
git reset HEAD readme.txt 先撤出暂存区
git checkout -- readme.txt 再撤销修改

如果已经commit，可以回退到上一个版本库：
git reset --hard XXXX

* 如果已经推送到远程版本库，那么记录是无法撤回了．．．

删除：
rm readme.txt
git status 提示删除版本库文件或者checkout下来
git rm readme.txt　删除掉，删除掉不可checkout,因为文件已不存在

若要恢复
git log
git reset --hard 8c47 回退版本库
git checkout -- readme.txt　获取到本地


创建ssh key，以github为例
cd ~
mkdir .ssh 创建ssh目录，存放key
cd .ssh
ssh-keygen -t rsa -C "king636@163.com"　创建时提示文件名：nick
提示输入passphrase,这里测试为空才可以，不为空会创建失败

cat nick.pub
显示：
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDlPYuBQEcqgfLoKftEc8zVedmh8d/YpjBOi5x5MEg3i5wFSf7pX73dR9ZjQRruhmCxMH5rn6kjo8P4Aa+9ugZ0QcQvSwwyNd1k54zuvBW0BnuEPFtsrI+0F1vCIxmX9AtR2UbdyjwEcBr19r0EeyKi83h/4FrozjNFbD7W9IVOsP5qIO9rRYqnEGBc3XbNkSIOyw70eqVs1WXnmKz2d9h16YbSrC81QaiEmNyaDp7lRee/lN2Shmgi6IHISoh9tMEWz0apGHTrFhug4GIoEGn6mEvmsoFJ3U2NLQW1Z4Rbq9Scr36Kor7usF7IWQlNENLxXBLKhe4p2UTvmyNAbrFD king636@163.com

github->setting->SSH and GPG keys->New SSH key中添加以上内容，保存为work_key

github上New repository创建一个git仓库:myWork
创建成功后地址为：https://github.com/king636/myWork.git

按照github上面的提示，本地仓库中创建README.md并提交到仓库：
cd ~/myGit
echo "# myWork" >> README.md
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/king636/myWork.git 本地关联远程库(库名：origin)
git push -u origin master 推送本地库的内容到远程库（这里需要输入github的帐号和密码，请确认？因为这里关联的时候用的是https的方式，所以每次都需要验证．改为ssh方式，git@github.com:king636/myWork.git）

-u参数：由于远程库是空的，git不但会把本地的master分支内容推送到远程新的master分支，还会把本地的master分支和远程的master分支关联起来

查看github的repository: https://github.com/king636/myWork
可以看到显示了README.md文件与内容

之后本地如果修改，修改后推送更新：git push origin master

e.g
echo "# do some test" >> README.md 
git add README.md 
git commit -m "test commit"
git push origin master

显示是master -> master的更新,查看github,已更新

问题：如果本地仓库是android的项目，怎么把所有文件提交到仓库中，再推送到远程库？
git add -A
git commit -m "xxxxx"
git push origin master

以上处理是先有本地仓库，然后关联空的远程库．
下面处理的是已有远程库，如何clone:
github上New repository -> cloneGit
选择Initialize this repository with a README
创建成功

cd ~
git clone git@github.com:king636/cloneGit (ssh方式，首次会有warning)
成功
cd cloneGit
ls
即可看到README.md

注意：如果公司只开放http端口，无法使用ssh


分支（当前在cloneGit目录下）
git branch 查看所有分支,当前分支为* master
git branch dev 创建分支
git checkout dev 切换到dev分支
git branch
输出：
* dev
  master

创建并切换分支也可以用：
git checkout -b test
git branch
输出：
  dev
  master
* test

分支做修改：
echo "# creating a new branch is quick" >> README.md
git add README.md
git commit -m "branch test"

git checkout master 切换到master分支
cat README.md 发现新增的内容没有在里面

git merge test 合并test分支到当前分支master
输出：
更新 114fa7f..f752cbc
Fast-forward
 README.md | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

cat README.md 修改内容显示
Fast-forward　代表合并是＂快进模式＂，即直接把master指向test的当前提交，所以合并速度非常快．之后分析非＂快进模式＂（合并冲突，需要解决冲突）

合并后可以删除test分支：
git branch -d test

git push origin master　推送到远程库

git checkout dev 切换到dev分支并做一些改动
echo "branch dev" >> README.md 
git add README.md
git commit -m "add branch dev"
git push origin dev

查看github，将分支dev推送到了远程库
To git@github.com:king636/cloneGit
 * [new branch]      dev -> dev

此时，分支dev中的README.md内容：cloneGitbranch dev
而分支master中的README.md内容：cloneGit# creating a new branch is quick

git checkout master 
git merge dev　合并将提示冲突，合并失败，修正冲突后提交修正

git status 也提示需要解决冲突
cat README.md
输出：
<<<<<<< HEAD
# cloneGit# creating a new branch is quick
=======
# cloneGitbranch dev
>>>>>>> dev

修改README.md文件，保存并提交，然后删除分支dev(也就是说有冲突时，手动修改冲突的地方，然后丢弃分支)
gedit README.md　并保存
git add README.md
git commit -m "conflict fixed"
git branch -d dev
git push origin master

分支管理
合并分支时，如果使用Fast forward模式，删除分支后，会丢失分支信息？(如何理解，举例？)
理解：合并分支时最好能提交该次合并的日志，便于跟踪．但是使用Fast forward模式合并时，无法提交日志，无法跟踪到该次合并信息．所以，尽量都使用merge --no-ff　-m "xxx"来合并分支
举例：
action start:

cd ~/cloneGit
git checkout -b dev 创建并切换新分支
gedit README.md 修改文件，增加一行# test branch merge no-ff
git add README.md
git commit -m "test branch no-ff"
git checkout master
git merge dev 用Fast forward模式合并分支
git log --graph --pretty=oneline --abbrev-commit
输出：
* 27b4486 test branch no-ff
*   fb4a6dc conflict fixed
|\  
| * 30156a4 add branch dev
* | f752cbc branch test
|/  
* 114fa7f Initial commit
git branch -d dev

action end

重复action:
....
git merge --no-ff -m "merge with no-ff" dev
git log --graph --pretty=oneline --abbrev-commit
输出：
*   64f38f9 merge with no-ff
|\  
| * 0e334c3 test branch no-ff again
|/  
* 27b4486 test branch no-ff
*   fb4a6dc conflict fixed
|\  
| * 30156a4 add branch dev
* | f752cbc branch test
|/  
* 114fa7f Initial commit

意思就是merge的时候-m增加的说明？是的，再实验一次：
git branch -d dev
重复action
....
git merge -m "merge with Fast forward"
输出：
Fast-forward (no commit created; -m option ignored)　该合并无法提交日志？
git log --graph --pretty=oneline --abbrev-commit
输出：
* df6f3e7 test branch no-ff back
*   64f38f9 merge with no-ff
|\  
| * 0e334c3 test branch no-ff again
|/  
* 27b4486 test branch no-ff
*   fb4a6dc conflict fixed
|\  
| * 30156a4 add branch dev
* | f752cbc branch test
|/  
* 114fa7f Initial commit

分支策略：
master仅用来发布新版本，平时不在master上修改
创建分支dev，每个人都在dev上干活，每个人都有自己的分支，修改后往dev上合并．当需要发布新版本时，再把dev分支合并到master上．

Bug分支
在dev分支做修改并未完成（完成的时候才add和commit）的时候，收到修复Bug的任务，需要先修复Bug.
应该如何正确操作呢？
1. 保存当前dev的修改，然后切换到master分支（dev修改如果不保存，在其他分支做修改时会把之前的修改覆盖掉．因为这时的dev分支没有add和commit,dev分支并没有修改完成，所以不能add和commit.如果可以add和commit,那么不保存也就可以了）
2. 创建新的修复Bug的分支，修复Bug后合并到master分支，删除修复Bug的分支
3. 切换回dev分支，恢复之前保存的dev修改（理论上该Bug修复合并master应该不会与以后合并dev分支时冲突，除非dev也有修改到对应的代码，这时应该处理冲突再合并）

git checkout -b dev
gedit README.md 增加一行
# work at dev branch, not finished....
git status　当前不是干净的工作区
git stash 保存，输出：
Saved working directory and index state WIP on dev: df6f3e7 test branch no-ff back
HEAD 现在位于 df6f3e7 test branch no-ff back

git status 干净的工作区
git checkout master
git checkout -b issue-101 创建bug分支
gedit README.md　修改# test branch merge no-ff back issue-101
git add README.md
git commit -m "fix issue-101"
rm README.md~ 该文件是使用gedit编辑时生成
git checkout master
git merge --no-ff -m "merged bug fix 101" issue-101
git branch -d issue-101
git checkout dev
git stash list 查看保存的工作现场，输出：
stash@{0}: WIP on dev: df6f3e7 test branch no-ff back

两种方式恢复：
1. 
git stash apply 恢复后stash内容并没有删除
git stash drop　删除stash内容

2.
git stash pop

stash　保存工作区，相当于快照的概念，可以备份多个快照，选择某个进行恢复
比如 git stash apply stash@{0}

这里使用：
git stash pop
cat README.md 又可以看到之前添加的# work at dev branch, not finished....
git add README.md
git commit -m "branch dev finished"
git checkout master
git merge --no-ff -m "merge branch dev" dev
提示冲突，因为README.md文件的# test branch merge no-ff back issue-101
冲突了
修改后提交，删除dev分支
gedit README.md
git add README.md
git commit -m "fix conflict when merge dev"
git push origin master
git branch -d dev


feature分支,添加功能并合并
git checkout -b dev
gedit README.md 添加一行# branch dev
这时需要添加feature
git stash 先保存
git checkout -b feature-01　创建并切换到feature分支
gedit README.md 添加一行# branch feature-01(注意现在看不到# branch dev)
git add README.md
git commit -m "add new feature"
还未合并时，收到指示这个新功能不需要了，那么应该删除该feature分支
使用git branch -d feature-01　无法删除（防止误操作）
git branch -D feature-01 来删除feature分支
git stash pop 恢复dev工作


多人协作:
git remote 查看远程库信息，输出：
origin

git remote -v 查看远程库详细信息，输出：
origin	git@github.com:king636/cloneGit (fetch)
origin	git@github.com:king636/cloneGit (push)

显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址．

分支与远程库管理：
master分支是主分支，需要推送，保持同步
dev分支是开发分支，也要保持同步
bug分支一般都是自己完成修复，没必要推送到远程,除非需要查看修复bug情况等
feature分支如果有多人合作，需要推送，自己完成就不用推送了

多人合作主要就是指：多人往master和dev分支上推送各自的修改

在新的目录clone　
cd ~
mkdir otherGit
cd otherGit
git clone git@github.com:king636/cloneGit.git
git branch 只看到master分支，实际上该github仓库中之前有推送dev分支
git checkout -b dev origin/dev 创建远程dev分支到本地
cat README.md 输出：
# cloneGitbranch dev
这是很早时候的dev分支中README.md的内容

~/cloneGit下当前处于dev分支
cat README.md 输出：
# cloneGit
# creating a new branch is quick
# Gitbranch dev
# test branch merge no-ff
# test branch merge no-ff
# test branch merge no-ff back issue-101
# work at dev branch, not finished....
# branch dev
git add README.md
git commit -m "commit branch dev work"
git push origin dev　将dev推送到远程(假设当前还不需要推送master)

回到~/otherGit/cloneGit:
dev分支下继续开发：
gedit README.md 添加# I start to develop branch dev
目前的内容 cat README.md:
# cloneGitbranch dev
# I start to develop branch dev

git add README.md
git commit -m "my dev work stage 1"
git push origin dev 无法推送，因为远程dev分支被别的版本库进行了推送

git pull 抓取最新的dev分支
这里提示冲突了，因为抓取后会自动合并，当前对README.md进行了修改，和远程的有冲突．
cat README.md 输出：
<<<<<<< HEAD
# cloneGitbranch dev
# I start to develop branch dev
=======
# cloneGit
# creating a new branch is quick
# Gitbranch dev
# test branch merge no-ff
# test branch merge no-ff
# test branch merge no-ff back issue-101
# work at dev branch, not finished....
# branch dev
>>>>>>> 30133a822f2789a4c906106ca38a0fe54090d1b3

修改为：
# cloneGitbranch dev
# cloneGit
# creating a new branch is quick
# Gitbranch dev
# test branch merge no-ff
# test branch merge no-ff
# test branch merge no-ff back issue-101
# work at dev branch, not finished....
# branch dev
# I start to develop branch dev

然后再推送：
git add README.md
git commit -m "my dev work stage 1"
git push origin dev

成功

如果git pull失败（原因是没有指定本地dev分支与远程origin/dev分支的链接）
git branch --set-upstream dev origin/dev
建立本地dev和远程dev的链接
推测原因：本地创建的dev分支不是从远程dev创建，即
git checkout -b dev 
而不是git checkout -b dev origin/dev

git checkout master
git branch -d dev 删除dev分支
git checkout -b dev 创建dev分支，此时的dev分支是在master上分支而来，内容与master相同，与远程的dev内容不同
echco "test branch dev git pull" >> README.md
git add README.md
git commit -m "dev update"
git push origin dev 无法推送，需要与远程dev合并
git pull 输出：
There is no tracking information for the current branch.
....

则需要建立链接，之前的推测正确

git branch --set-upstream dev origin/dev
git pull 抓取成功，提示冲突，解决冲突，提交推送即可
这里不想修改了，如果直接删除本地文件，再抓取远程，会有问题：
rm README.md
git pull 提示pull不可用，因为有未合并的文件
用-D删除dev分支：
git branch -D dev
git checkout -b dev origin/dev　这样远程的README.md文件就抓取下来了


标签管理，打tag, 发布版本时打tag
创建tag(当前在~/otherGit/cloneGit下,分支有master和dev)
git checkout master
git tag v1.0 打tag
git tag 查看
在历史提交的commit id上打tag:
git log --pretty=oneline --abbrev-commit　输出：
f1a8d94 fix conflict when merge dev
96befde branch dev finished
17a225d merged bug fix 101
b97b87c fix issue-101
df6f3e7 test branch no-ff back
64f38f9 merge with no-ff
0e334c3 test branch no-ff again
27b4486 test branch no-ff
fb4a6dc conflict fixed
30156a4 add branch dev
f752cbc branch test
114fa7f Initial commit

比如在64f38f9上打tag，这是一次合并操作:
git tag v0.9 64f38f9
git show v0.9 查看标签信息，输出：
commit 64f38f9944a8870dba9db9eb3b198ebfefbac81a
Merge: 27b4486 0e334c3
Author: nick <nick@HYSYB-CHENBIN.218.85.157.99>
Date:   Wed Sep 6 14:39:43 2017 +0800

    merge with no-ff

git show v1.0 输出：
commit f1a8d94bad33bf17ab2229088eee4e72a96cc3c8
Merge: 17a225d 96befde
Author: nick <nick@HYSYB-CHENBIN.218.85.157.99>
Date:   Wed Sep 6 15:54:54 2017 +0800

    fix conflict when merge dev

diff --cc README.md
index b31aae3,6216fe5..cbf1e5f
--- a/README.md
+++ b/README.md
@@@ -3,5 -3,5 +3,5 @@@
  # Gitbranch dev
  # test branch merge no-ff
  # test branch merge no-ff
 -# test branch merge no-ff back
 +# test branch merge no-ff back issue-101
- 
+ # work at dev branch, not finished....


可以发现v1.0是在最新commit上打的tag

操作tag

上面打tag并不合理，远程库的master并没有同步dev的修改，先同步再打tag并推送tag到远程．
git tag -d v1.0 删除tag
git tag -d v0.9

git merge --no-ff -m "merge dev" dev
git push origin master
现在dev合并到master了，可以打tag了
git tag v1.0
git show v1.0 输出：
Merge: f1a8d94 fbc19a8
Author: nick <nick@HYSYB-CHENBIN.218.85.157.99>
Date:   Wed Sep 6 17:29:49 2017 +0800

    merge dev


git push origin v1.0 推送tag到远程

git push origin --tags 一次性推送所有tag

远程tag查看，即github中release下面

如何删除远程tag:
git tag -d v1.0 先删除本地tag
git push origin :refs/tags/v1.0 删除远程tag


